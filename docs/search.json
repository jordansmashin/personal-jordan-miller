[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Welcome to the home page for my CSC 324 website warmup. this website was created as an introduction to html and javascript for our class. Feel free to use the navigation bars above or to the left for more information about myself and what we have been doing in the class over the course of the semester."
  },
  {
    "objectID": "articles/article_03.html",
    "href": "articles/article_03.html",
    "title": "Article 3: Password generator",
    "section": "",
    "text": "Password Generator\n      \n          Password Length:\n          \n      \n\n        Include Special Characters\n        \n            Yes\n            No\n        \n\n        Include uppercase letters\n        \n            Yes\n            No\n        \n\n        Include numbers\n        \n            Yes\n            No\n        \n\n      Generate Password"
  },
  {
    "objectID": "articles/article_01.html",
    "href": "articles/article_01.html",
    "title": "Article 1: Chapter 2 making a chessboard",
    "section": "",
    "text": "In chapter 2 of eleoquent javascript we were asked to make a chessboard that consisted of # and empty space in an alternating sequence. The criteria was that you had to make an 8 x 8 grid consisting of these alternating symbols to construct the chessboard using newlines to go to the next set. Afterwards we were challenged to modify the code in order to work with any parameters for the height and width of the chessboard, even if it was uneven. And this is were this seemingly easy problem at first became a lot harder. The main problem being that it wasn’t too hard to make a chessboard that followed an even number as the paramater, but odd numbers caused some issues.\nThe exact wording of the problem was as follows:\nWrite a program that creates a string that represents an 8×8 grid, using newline characters to separate lines. At each position of the grid there is either a space or a \"#\" character. The characters should form a chessboard.\n\nPassing this string to console.log should show something like this:\n\n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # #\n\nWhen you have a program that generates this pattern, define a binding size = 8 and change the program so that it\nworks for any size, outputting a grid of the given width and height.\nTo accomplish the desired result I had to first define a height and width parameter that the user provides for the program. Then using nested for loops I had it check the rows and collumns to see where the chessboard was currently at with the main kicker being the if statement that determined whether the next element in the chessboard was to be a # or empty space. Finally the loop created a newline after it had reached the desired width for the line, and continued until it reached the desired height.\nMy code was as follows:\nconst height = 8;\nconst width = 8;\nlet chessboard = '';\n\nfor (let row = 0; row &lt; height; row++) {\n  for (let col = 0; col &lt; width; col++) {\n    if ((row + col) % 2 === 0) {\n      chessboard += ' ';\n    } else {\n      chessboard += '#';\n    }\n  }\n  chessboard += '\\n';\n}\n\nconsole.log(chessboard);\nThis solution took a lot of AI assistance when it came to trying to make my program run with odd and even parameters. Mainly the newline part of the code was where I got stuck on, but after some coaching I managed to get a solution that fit my purposes."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Hey there, I’m Jordan Miller, and I’m from Georgetown, Kentucky. Right now, I’m in college pursuing a business administration major and computer science minor. When I’m not working or doing homework, you can find me messing around with resin to make cool furniture pieces. It’s a great stress reliever after all the hustle and bustle of life. Even when I start to doubt what I should be doing my family has always been cheering me on and pushing me to do my best, whether it’s school or work so that I can always be proud of what I have accomplished."
  },
  {
    "objectID": "articles/article_02.html",
    "href": "articles/article_02.html",
    "title": "Article 2: Chapter 4 Sum of a Range",
    "section": "",
    "text": "In chapter 4 of eleqoent javascript, we were assigned to find the sum of a range by first writing a range function that created an array of numbers based on a start and ending number provided by the user. Next we were instructed to write a sum function that took the array from our range function and provided the sum of all its numbers.\nThe exact wording was as follows:\nWrite a range function that takes two arguments, start and end, and returns an array containing all the numbers \nfrom start up to (and including) end.\n\nNext, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the example\nprogram and see whether it does indeed return 55.\nFor my solution to the range function part I used basic iteration to start with the beginning number and keep going until it reached the end number provided. This was done by pushing the elements that were iterated into a blank array I defined at the start after they were looked at to see if they were the ending number.\nThe code looked like this:\nfunction range(start, end) {\n    const result = [];\n    for (let i = start; i &lt;= end; i++) {\n      result.push(i);\n    }\n    return result;\n  }\nNext, looking at the sum function I used the reduce method to simplify the array from the range function into one singular value that can be called the sum of the range.\nThe code looked like this:\nfunction sum(numbers) {\n    return numbers.reduce((total, number) =&gt; total + number, 0);\n  }\nAt the time I had used AI assistance to help me understand the reduce method as a solution to my problem, mainly the total and number parts. total being the number provided by reducing the range function to one value, and number being the current element being proccessed."
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "This is the home page to the articles section of the website. Feel free to use the navigation bar to the left to see some of the projects we have been working on throughout the course of the year"
  }
]