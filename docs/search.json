[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Welcome to the home page for my CSC 324 website warmup. this website was created as an introduction to html and javascript for our class. Feel free to use the navigation bars above or to the left for more information about myself and what we have been doing in the class over the course of the semester."
  },
  {
    "objectID": "articles/article_03.html",
    "href": "articles/article_03.html",
    "title": "Article 3: Password generator",
    "section": "",
    "text": "For my major improvement I chose to make a password generator. The features for password generation that I decided to include were: the length of the password and whether or not to include numbers, special characters and uppercase letters"
  },
  {
    "objectID": "articles/article_01.html",
    "href": "articles/article_01.html",
    "title": "Article 1: Chapter 2 making a chessboard",
    "section": "",
    "text": "In chapter 2 of eleoquent javascript we were asked to make a chessboard that consisted of # and empty space in an alternating sequence. The criteria was that you had to make an 8 x 8 grid consisting of these alternating symbols to construct the chessboard using newlines to go to the next set. Afterwards we were challenged to modify the code in order to work with any parameters for the height and width of the chessboard, even if it was uneven. And this is were this seemingly easy problem at first became a lot harder. The main problem being that it wasn’t too hard to make a chessboard that followed an even number as the paramater, but odd numbers caused some issues.\nThe exact wording of the problem was as follows:\nWrite a program that creates a string that represents an 8×8 grid, using newline characters to separate lines. At each position of the grid there is either a space or a \"#\" character. The characters should form a chessboard.\n\nPassing this string to console.log should show something like this:\n\n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # # \n # # # #\n# # # #\n\nWhen you have a program that generates this pattern, define a binding size = 8 and change the program so that it\nworks for any size, outputting a grid of the given width and height.\nTo accomplish the desired result I had to first define a height and width parameter that the user provides for the program. Then using nested for loops I had it check the rows and collumns to see where the chessboard was currently at with the main kicker being the if statement that determined whether the next element in the chessboard was to be a # or empty space. Finally the loop created a newline after it had reached the desired width for the line, and continued until it reached the desired height.\nMy code was as follows:\nconst height = 8;\nconst width = 8;\nlet chessboard = '';\n\nfor (let row = 0; row &lt; height; row++) {\n  for (let col = 0; col &lt; width; col++) {\n    if ((row + col) % 2 === 0) {\n      chessboard += ' ';\n    } else {\n      chessboard += '#';\n    }\n  }\n  chessboard += '\\n';\n}\n\nconsole.log(chessboard);\nThis solution took a lot of AI assistance when it came to trying to make my program run with odd and even parameters. Mainly the newline part of the code was where I got stuck on, but after some coaching I managed to get a solution that fit my purposes."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Hey there, I’m Jordan Miller, and I’m from Georgetown, Kentucky. Right now, I’m in college pursuing a business administration major and computer science minor. When I’m not working or doing homework, you can find me messing around with resin to make cool furniture pieces. It’s a great stress reliever after all the hustle and bustle of life. Even when I start to doubt what I should be doing my family has always been cheering me on and pushing me to do my best, whether it’s school or work so that I can always be proud of what I have accomplished."
  },
  {
    "objectID": "articles/article_02.html",
    "href": "articles/article_02.html",
    "title": "Article 2: Chapter 4 Sum of a Range",
    "section": "",
    "text": "In chapter 4 of eleqoent javascript, we were assigned to find the sum of a range by first writing a range function that created an array of numbers based on a start and ending number provided by the user. Next we were instructed to write a sum function that took the array from our range function and provided the sum of all its numbers.\nThe exact wording was as follows:\nWrite a range function that takes two arguments, start and end, and returns an array containing all the numbers \nfrom start up to (and including) end.\n\nNext, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the example\nprogram and see whether it does indeed return 55.\nFor my solution to the range function part I used basic iteration to start with the beginning number and keep going until it reached the end number provided. This was done by pushing the elements that were iterated into a blank array I defined at the start after they were looked at to see if they were the ending number.\nThe code looked like this:\nfunction range(start, end) {\n    const result = [];\n    for (let i = start; i &lt;= end; i++) {\n      result.push(i);\n    }\n    return result;\n  }\nNext, looking at the sum function I used the reduce method to simplify the array from the range function into one singular value that can be called the sum of the range.\nThe code looked like this:\nfunction sum(numbers) {\n    return numbers.reduce((total, number) =&gt; total + number, 0);\n  }\nAt the time I had used AI assistance to help me understand the reduce method as a solution to my problem, mainly the total and number parts. total being the number provided by reducing the range function to one value, and number being the current element being proccessed."
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "This is the home page to the articles section of the website. Feel free to use the navigation bar to the left to see some of the projects we have been working on throughout the course of the year"
  },
  {
    "objectID": "articles/passwordGenerator.html",
    "href": "articles/passwordGenerator.html",
    "title": "Password Generator",
    "section": "",
    "text": "Password Generator\n\n\n\n    \n        Password Generator\n        \n            Password Length:\n            \n        \n        \n            \n            Include Uppercase\n        \n        \n            \n            Include Numbers\n        \n        \n            \n            Include Special Characters\n        \n        \n    Generate Password\n\n\n    Generated Password:\n    \n\n\n    Copy Password"
  },
  {
    "objectID": "articles/article_03.html#creating-password-length",
    "href": "articles/article_03.html#creating-password-length",
    "title": "Article 3: Password generator",
    "section": "Creating Password Length",
    "text": "Creating Password Length\nHtml\n&lt;div id=\"password-generator-container\"&gt;\n    &lt;div&gt;\n        &lt;label for=\"passwordLength\"&gt;Password Length:&lt;/label&gt;\n        &lt;input type=\"number\" id=\"passwordLength\" min=\"2\" max=\"50\" value=\"8\"&gt;\n    &lt;/div&gt;\nthe html code uses the built in label and input methods. I use the input method to allow the user to input a number into the provided box. I have it set to have a default value of 8 when you first load the page, with a minimum password size of 2 and a maximum size of 50. As for the label method, all it does is add the words password length above the input box\nJavascript\nlet password = '';\n\nfunction generatePassword() {\nconst length = document.getElementById('passwordLength').value;\n}\nThe javascript code at this point is not too special and is only beginning to make the function by setting up some of the variables and assigning them values"
  },
  {
    "objectID": "articles/article_03.html#adding-in-the-checkboxes-for-password-generation",
    "href": "articles/article_03.html#adding-in-the-checkboxes-for-password-generation",
    "title": "Article 3: Password generator",
    "section": "Adding in the checkboxes for password generation",
    "text": "Adding in the checkboxes for password generation\nNext up I added in the checkboxes for including special characters, uppercase letters, and numbers by including the following code:\nHtml\n&lt;body&gt;\n    &lt;div id=\"password-generator-container\"&gt;\n        &lt;div&gt;\n            &lt;input type=\"checkbox\" id=\"includeUppercase\" checked&gt;\n            &lt;label for=\"includeUppercase\"&gt;Include Uppercase&lt;/label&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;input type=\"checkbox\" id=\"includeNumbers\" checked&gt;\n            &lt;label for=\"includeNumbers\"&gt;Include Numbers&lt;/label&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;input type=\"checkbox\" id=\"includeSpecialChars\" checked&gt;\n            &lt;label for=\"includeSpecialChars\"&gt;Include Special Characters&lt;/label&gt;\n        &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nThe following html code adds in the check boxes using the aforementioned input and label methods, but this time setting the type in input to checkbox.\nJavascript\nfunction generatePassword() {\n    const includeUppercase = document.getElementById('includeUppercase').checked;\n    const includeNumbers = document.getElementById('includeNumbers').checked;\n    const includeSpecialChars = document.getElementById('includeSpecialChars').checked;\n\n    const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';\n    const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const numberChars = '0123456789';\n    const specialChars = '!#$?%&';\n\n    let chars = lowercaseChars;\n\n    if (includeUppercase) {\n        chars += uppercaseChars;\n    }\n\n    if (includeNumbers) {\n        chars += numberChars;\n    }\n\n    if (includeSpecialChars) {\n        chars += specialChars;\n    }\n}\nwith these parts added to the function, you start to see that I have defined a starting set of letters available to be used in password generation named chars, whose starting value is set to the lowercase letter alphabet. When the user checks one of the boxes to include a specific feature, then it adds the provided array to the existing chars variable."
  },
  {
    "objectID": "articles/article_03.html#password-generation",
    "href": "articles/article_03.html#password-generation",
    "title": "Article 3: Password generator",
    "section": "Password Generation",
    "text": "Password Generation\nNow that most of the function for creating the array that the password will generate from, it is time to actually include the code to randomly generate from it.\nHtml\n&lt;body&gt;\n    &lt;div id=\"password-generator-container\"&gt;\n        &lt;div&gt;\n            &lt;button onclick=\"generatePassword()\"&gt;Generate Password&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;label for=\"generatedPassword\"&gt;Generated Password:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"generatedPassword\" readonly&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nJavascript\nfunction generatePassword() {\n    password = ''; \n    for (let i = 0; i &lt; length; i++) {\n        const randomIndex = Math.floor(Math.random() * chars.length);\n        password += chars.charAt(randomIndex);\n    }\n\n    document.getElementById('generatedPassword').value = password;\n}\nThis part of the code is the bread and butter of the function as it is what randomly selects characters from the array to add to the password. Starting from nothing, the code continues to loop until it reaches the specified length from the password length the user set in the beginning. By using math.floor I ensure that the code picks a whole number, which is needed to be able to select the corresponding character out of the array, and math.random is used to generate that random number."
  },
  {
    "objectID": "articles/article_03.html#copying-to-the-clipboard",
    "href": "articles/article_03.html#copying-to-the-clipboard",
    "title": "Article 3: Password generator",
    "section": "Copying to the clipboard",
    "text": "Copying to the clipboard\nThis part of the program was something I really wanted to add, but had no clue how to go about doing it. So after consulting chatGPT for a while I finally managed to get the functionality into my code, where I then styled it as desired.\nThe chat logs were as follows\nMe:\nhow do i add a copy to clipboard option for my generated password\n\nchatGPT:\nYou can add a \"Copy to Clipboard\" functionality to your generated password by modifying the JavaScript code. Here's an updated version of the script that includes a function for copying the generated password to the clipboard:\nfunction generatePassword() {\n    const length = document.getElementById('passwordLength').value;\n    const includeUppercase = document.getElementById('includeUppercase').checked;\n    const includeNumbers = document.getElementById('includeNumbers').checked;\n    const includeSpecialChars = document.getElementById('includeSpecialChars').checked;\n\n    const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';\n    const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const numberChars = '0123456789';\n    const specialChars = '!@#$%^&*()_+[]{}|;:,.&lt;&gt;?';\n\n    let chars = lowercaseChars;\n\n    if (includeUppercase) {\n        chars += uppercaseChars;\n    }\n\n    if (includeNumbers) {\n        chars += numberChars;\n    }\n\n    if (includeSpecialChars) {\n        chars += specialChars;\n    }\n\n    let password = '';\n    for (let i = 0; i &lt; length; i++) {\n        const randomIndex = Math.floor(Math.random() * chars.length);\n        password += chars.charAt(randomIndex);\n    }\n\n    const generatedPasswordInput = document.getElementById('generatedPassword');\n    generatedPasswordInput.value = password;\n\n    // Add copy to clipboard functionality\n    const copyButton = document.getElementById('copyButton');\n    copyButton.addEventListener('click', () =&gt; {\n        generatedPasswordInput.select();\n        document.execCommand('copy');\n        alert('Password copied to clipboard!');\n    });\n}\nIn your HTML, add a button for copying the password:\n&lt;!-- ... existing HTML code ... --&gt;\n&lt;div&gt;\n    &lt;button id=\"copyButton\"&gt;Copy to Clipboard&lt;/button&gt;\n&lt;/div&gt;\n&lt;!-- ... existing HTML code ... --&gt;\nchatGPT:\nThis code selects the content of the generated password input field when the \"Copy to Clipboard\" button is clicked and executes the document.execCommand('copy') command to copy the selected text to the clipboard. It also displays an alert to notify the user that the password has been copied.\nIt was at this point that I realized what the code was doing, but vs code did not like the document.execCommand(‘copy’) line. when I told chatGPT this it provided me with the following more up to date version of the code which did work\nconst copyButton = document.querySelector('#copyButton');\n\ncopyButton.addEventListener('click', () =&gt; {\n    navigator.clipboard.writeText(password)\n        .then(() =&gt; {\n            alert('Password copied to clipboard!');\n        })\n        .catch(err =&gt; {\n            console.error('Unable to copy to clipboard', err);\n        });\n});"
  }
]